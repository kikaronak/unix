// nano filename.c
// gcc filename.c -o filename
// ./filename

#include <stdio.h>
#include <stdlib.h>
struct Process {
int id;
int arrival;
int burst;
int completion;
int turnaround;
int waiting;
};
void calculateTimes(struct Process p[], int n) {
int currentTime = 0;
int completed = 0;
int shortest;
while (completed != n) {
shortest = -1;
int minBurst = INT_MAX;
for (int i = 0; i < n; i++) {
if (p[i].arrival <= currentTime && p[i].completion == 0 && p[i].burst < minBurst) {
minBurst = p[i].burst;
shortest = i;
}
}
if (shortest == -1) {
currentTime++;
} else {
p[shortest].completion = currentTime + p[shortest].burst;
p[shortest].turnaround = p[shortest].completion - p[shortest].arrival;
p[shortest].waiting = p[shortest].turnaround - p[shortest].burst;
currentTime = p[shortest].completion;
completed++;
}
}
}
void displayResults(struct Process p[], int n) {
printf("\nProcess\tArrival\tBurst\tCompletion\tTurn-Around\tWaiting\n");
for (int i = 0; i < n; i++) {
printf(" P[%d]\t %d\t %d\t %d\t\t %d\t\t %d\n", p[i].id, p[i].arrival, p[i].burst,
p[i].completion, p[i].turnaround, p[i].waiting);
}
float avg_tat = 0, avg_wt = 0;
for (int i = 0; i < n; i++) {
avg_tat += p[i].turnaround;
avg_wt += p[i].waiting;
}
avg_tat /= n;
avg_wt /= n;
printf("\nAverage Turnaround Time: %.2f\n", avg_tat);
printf("Average Waiting Time: %.2f\n", avg_wt);
}
void sortProcesses(struct Process p[], int n) {
for (int i = 0; i < n - 1; i++) {
for (int j = 0; j < n - i - 1; j++) {
if (p[j].arrival > p[j + 1].arrival || (p[j].arrival == p[j + 1].arrival && p[j].burst > p[j +
1].burst)) {
struct Process temp = p[j];
p[j] = p[j + 1];
p[j + 1] = temp;
}
}
}
}
int main() {
int n;
printf("Enter the number of processes: ");
scanf("%d", &n);
if (n <= 0) {
printf("Invalid number of processes. Exiting...\n");
return 1;
}
struct Process p[n];
for (int i = 0; i < n; i++) {
printf("Enter details for process %d:\n", i + 1);
printf("Arrival Time: ");
scanf("%d", &p[i].arrival);
if (p[i].arrival < 0) {
printf("Arrival time cannot be negative. Exiting...\n");
return 1;
}
printf("Burst Time: ");
scanf("%d", &p[i].burst);
if (p[i].burst <= 0) {
printf("Burst time must be positive. Exiting...\n");
return 1;
}
p[i].id = i + 1;
p[i].completion = 0; // Initialize completion time to 0
}
sortProcesses(p, n);
calculateTimes(p, n);
displayResults(p, n);
return 0;
}
